#!/bin/bash
version=0.0.1
usage="$(basename "$0") [-hven] [<content>]
Post to Bluesky, optionally pre-format your post. Expects \$BLUESKY_HANDLE and \$BLUESKY_PASSWORD to be set.

-h[Help]          Prints this message, then exits
-v[Version]       Prints this version info, then exits
-e[Entry]         Retrieve latest entry information
-n[No-op]         Prints the payload instead of sending it (dry-run)
"

while getopts ':hvne' option; do
  case "$option" in
    h) echo "$usage"
      exit
      ;;
    v) echo "version $version"
      exit
      ;;
    e) entry="true"
      ;;
    n) dryRun="true"
      ;;
    *) echo "Unknown Option '$OPTARG', exiting"
      exit
      ;;
  esac
done
shift $((OPTIND -1))

if [ -n "$1" ]; then
  content="$1"
fi

# === HELPERS ===
source ./helpers.sh

get_entry() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS (BSD find + stat)
    latest_file=$(find content -type f -path "*/entries/*.md" \
      -exec stat -f "%m %N" {} + 2>/dev/null \
      | sort -n -r | head -n 1 | cut -d' ' -f2-)
  else
    # Linux (GNU find + stat)
    latest_file=$(find content -type f -path "*/entries/*.md" \
      -exec stat --format="%Y %n" {} + 2>/dev/null \
      | sort -n -r | head -n 1 | cut -d' ' -f2-)
  fi

  [[ -f "$latest_file" ]] || echo "ERROR: Not a valid file path."

  slug=$(basename "$latest_file" .html)
  IFS='/' read -r _ section subsection _ <<< "$latest_file"
  entry_url="https://flare576.com/meta/$section/$subsection/$slug"
  title=$(get_meta "$latest_file" "title")
  published=$(get_meta "$latest_file" "published")
  if [ "$published" == "false" ]; then
    echo "Latest entry not published. Exiting"
    exit 1
  fi
  echo "Latest entry: $title ($entry_url)."
}

generate_facets() {
  local text="$1"
  local facets=()
  local utf8_text
  utf8_text=$(echo -n "$text" | iconv -f utf-8 -t utf-8)

  # Use grep-compatible URL pattern (matches most http/https URLs)
  local url_regex='https?://[^ ]+'

  while read -r url; do
    # Get byte offsets of each match
    start=$(printf "%s" "$utf8_text" | grep -b -o "$url" | head -n1 | cut -d: -f1)
    end=$((start + ${#url}))

    # Append facet object
    facets+=("{
      \"index\": {\"byteStart\": $start, \"byteEnd\": $end},
      \"features\": [{\"\$type\": \"app.bsky.richtext.facet#link\", \"uri\": \"$url\"}]
    }")
  done < <(grep -oE "$url_regex" <<< "$utf8_text")

  # Use grep-compatible mention pattern
  local mention_regex='@[^ ]+'

  while read -r mention; do
    # Get byte offsets of each match
    start=$(printf "%s" "$utf8_text" | grep -b -o "$mention" | head -n1 | cut -d: -f1)
    end=$((start + ${#mention}))

    # Append facet object
    local did="$(get_did "${mention:1}")"
    if [ $? -eq 0 ] && [ -n "$did" ]; then
      facets+=("{
        \"index\": {\"byteStart\": $start, \"byteEnd\": $end},
        \"features\": [{\"\$type\": \"app.bsky.richtext.facet#mention\", \"did\": \"$did\"}]
      }")
    else
      echo "Skipping unresolved handle: $mention" >&2
    fi
  done < <(grep -oE "$mention_regex" <<< "$utf8_text")

  # Use grep-compatible hashtag pattern
  local hashtag_regex='( |^)(#[^ ]+)'

  while read -r hashtag; do
    # Get byte offsets of each match
    start=$(printf "%s" "$utf8_text" | grep -b -o "$hashtag" | head -n1 | cut -d: -f1)
    end=$((start + ${#hashtag}))

    # Append facet object
    cleanTag=${hashtag:1}
    facets+=("{
      \"index\": {\"byteStart\": $start, \"byteEnd\": $end},
      \"features\": [{\"\$type\": \"app.bsky.richtext.facet#tag\", \"tag\": \"$cleanTag\"}]
    }")
  done < <(grep -oE "$hashtag_regex" <<< "$utf8_text")

  # Output full facets array as JSON
  printf '[%s]\n' "$(IFS=,; echo "${facets[*]}")"
}

get_did() {
  local handle="$1"
  local response
  local did

  response=$(curl -s -X GET https://bsky.social/xrpc/com.atproto.identity.resolveHandle?handle=$handle)
  did="$(echo "$response" | jq -r '.did // empty')"
  if [ -z "$did" ]; then
    echo "WARNING: Could not resolve handle @$handle" >&2
    return 1
  fi

  printf "%s" "$did"
}

generate_embed() {
  local text="$1"
  local embedUrl
  local utf8_text
  utf8_text=$(echo -n "$text" | iconv -f utf-8 -t utf-8)

  # Use grep-compatible URL pattern (matches most http/https URLs)
  local url_regex='https?://[^ ]+'

  while read -r url; do
    # If this is the first link, or if it's a link to our own site, set it as the embedURL
    if [ -z "$embedUrl" ] || [[ "$url" == *flare576.com* ]]; then
      embedUrl="$url"
    fi
  done < <(grep -oE "$url_regex" <<< "$utf8_text")

  if [ -n "$embedUrl" ]; then
    printf '{
    "$type": "app.bsky.embed.external",
    "external": {
      "uri": "%s",
      "title": "Flare576 | %s",
      "description": "Personal hub for Flare576 - Steam Deck, programming, family life, and more."
    }
  }' "$embedUrl" "$title"
  else
    printf '{}'
  fi
}

# === CONFIG ===
# These should be set as environment variables:
# BLUESKY_HANDLE      → domain or IP of your SFTP server
# BLUESKY_PASSWORD    → your SFTP username

# === VALIDATION ===
if [[ -z "$BLUESKY_HANDLE" || -z "$BLUESKY_PASSWORD" ]]; then
  echo "One or more required BLUESKY_* environment variables are missing."
  echo "Make sure BLUESKY_HANDLE and BLUESKY_PASSWORD are set."
  exit 1
fi

# === ANCHOR ===
cd "$(dirname "${BASH_SOURCE[0]}")"

# === BLUESKY ===
timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
if [ -n "$entry" ]; then
  get_entry
fi

cat > "$timestamp.txt" <<EOF
"$title"
$content
$entry_url
EOF


echo "Opening $EDITOR, exit with :cq to cancel."

if $EDITOR "$timestamp.txt"; then
  auth_response=$(curl -s -X POST https://bsky.social/xrpc/com.atproto.server.createSession \
    -H "Content-Type: application/json" \
    -d '{
      "identifier": "'"$BLUESKY_HANDLE"'",
      "password": "'"$BLUESKY_PASSWORD"'"
    }')
  access_token=$(echo "$auth_response" | jq -r '.accessJwt')
  did=$(echo "$auth_response" | jq -r '.did')

  post_text="$(<$timestamp.txt)"
  facets_json=$(generate_facets "$post_text")
  embed_json=$(generate_embed "$post_text")

  post_data=$(jq -n \
    --arg text "$post_text" \
    --arg time "$timestamp" \
    --arg type "app.bsky.feed.post" \
    --argjson facets "$facets_json" \
    --argjson embed "$embed_json" \
    '{
      "$type": $type,
      "text": $text,
      "createdAt": $time,
      "facets": $facets,
      "embed": $embed
    }')

  final_data="$(jq -n \
      --arg repo "$did" \
      --argjson record "$post_data" \
      --arg collection "app.bsky.feed.post" \
      '{repo: $repo, collection: $collection, record: $record}')"

  if [ -n "$dryRun" ]; then
    echo "$final_data"
  else
    curl -s -X POST https://bsky.social/xrpc/com.atproto.repo.createRecord \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $access_token" \
      -d "$final_data"
  fi

  # Only remove the file if posting was successful
  if [ $? -eq 0 ]; then
    rm "$timestamp.txt"
  fi
fi

